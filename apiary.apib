FORMAT: 1Ahttp://docs.tikebit.apiary.io/
HOST: https://api.tikebit.com/v1

# Tikebit™ - v1
![Tikebit™ Ecosystem](https://www.tikebit.com/assets/images/merchants-icon-tikebit-api-schema.svg)
Get cryptocurrencies in thousand of retail stores!

**[Tikebit™](http://www.tikebit.com)** is an easy and fast way to get cryptocurrencies with cash in thousand of retail stores around the world. Without banks, credit cards, in seconds.

Easy, fast, secure, private.

# Group Reseller
This methods are available for **resellers** accounts.

## Voucher [/reseller/voucher/]

### Create a voucher [POST]

Create a voucher.

+ Attributes
    + currency_iso_code: EUR (string, required)
        Only ***EUR*** is available at this moment.
        
    + amount: `5000` (number, required)
        **Min:** 100 | **Max:** 10000
        
        The total amount of voucher. In cents.
        
    + description: `Extra info` (string, required)
        **Max length:** 250.
        
        Custom description.
        
    + nonce: `uniqueString123` (string, required)
        **Max length:** 250. 
    
        Must be allways a unique string.
    
+ Request
    + Headers

            Authorization: Basic ABC123

    + Body
        
            {
                "currency_iso_code": "EUR",
                "amount": 5000,
                "description": "RetailStore: 225",
                "nonce": "uniqueString123"
            }
    
    + Schema
    
            {
                "type": "object",
                "properties": {
                    "currency_iso_code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "number"
                    },
                    "nonce": {
                        "type": "string"
                    }
                }
            }


+ Response 201 (application/json)
The voucher was created successfully.

    + Body

            {
                "id": 244,
                "serial": "7171BA",
                "creation_timestamp": 1462470670,
                "expiration_timestamp": 1494006670,
                "voucher_code": "1234123412341234",
                "currency_iso_code": "EUR",
                "amount": 5000,
                "balance": 5000,
                "description": "Extra information",
                "nonce": "uniqueString123"
            }
        
    + Schema
    
            {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number"
                    },
                    "serial": {
                        "type": "string"
                    },
                    "creation_timestamp": {
                        "type": "timestamp"
                    },
                    "expiration_timestamp": {
                        "type": "timestamp"
                    },
                    "voucher_code": {
                        "type": "string"
                    },
                    "currency_iso_code": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "number"
                    },
                    "balance": {
                        "type": "number"
                    },
                    "description": {
                        "type": "string"
                    },
                    "nonce": {
                        "type": "string"
                    }
                }
            }
       
+ Response 400 (application/json)
Bad request.

    Posible messages             |
    -----------------------------|
    The nonce was used before    |

    + Body

            {
                "code": "BadRequest",
                "message": "{message}"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }

+ Response 401 (application/json)
Forbidden. Check Auth credentials.

    + Headers

            WWW-Authenticate: Basic realm="reseller"

    + Body
    
            {
                "code": "Unauthorized",
                "message": "Invalid username/password"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }
        
+ Response 409 (application/json)
Conflict. Invalid argument. 
The error information will be as Object (key, value), where the key is the param name with the error and the value is an explanation of what was wrong. 
You can get multiple errors inside the *errors* object.

    type     | reason
    -------- | --------
    MISSING  | Field is required
    INVALID  | Invalid characters

    + Body
    
            {
              "code": "InvalidArgument",
              "message": "Validation failed",
              "errors": {
                "{{param}}": {
                  "type": "{{type}}",
                  "reason": "{{reason}}"
                }
              }
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "errors": {
                        "type": "object",
                        "properties": {
                            "{{param}}": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string"
                                    },
                                    "reason": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        
+ Response 500 (application/json)
Internal Server Error. Contact with Tikebit.

    + Body
    
            {
                "code": "InternalServerError",
                "message": "Some critical error has occurred"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }
        
+ Response 503 (application/json)
Service Unavailable. Try later.

    + Body
    
            {
                "code": "ServiceUnavailable",
                "message": "Service temporarily unavailable"
            }
    
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }
        

### Cancel a voucher [DELETE /reseller/voucher/{voucher_code}/]

Cancel a voucher. It can only be cancelled until 10 minutes after it was created. It is useful when a merchant creates a wrong voucher and he wants to cancel it immediately.

+ Parameters
    + voucher_code (required, string) ... Unique 16 digits long PIN code.

+ Request

    + Headers

            Authorization: Basic ABC123


+ Response 200 (application/json)
The voucher was cancelled successfully. You will get some details about cancellation.

    + Body

            {
                "id": 3,
                "creation_timestamp": 1494006670,
                "voucher_id": 2688
            }
        
    + Schema
    
            {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number"
                    },
                    "creation_timestamp": {
                        "type": "number"
                    },
                    "voucher_id": {
                        "type": "number"
                    }
                }
            }
            
+ Response 400 (application/json)
Bad request.

    Posible messages            |
    --------------------------- |
    The voucher was used        |
    
   
    + Body

            {
                "code": "BadRequest",
                "message": "{message}"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }

+ Response 401 (application/json)
Forbidden. Check Auth credentials.

    + Headers

            WWW-Authenticate: Basic realm="reseller"

    + Body
    
            {
                "code": "Unauthorized",
                "message": "Invalid username/password"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }

+ Response 404 (application/json)
Not Found. The voucher code was not found.

    + Body
    
            {
                "code": "NotFound",
                "message": "The voucher code was not found"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }

+ Response 409 (application/json)
Conflict. Invalid argument. 
The error information will be as Object (key, value), where the key is the param name with the error and the value is an explanation of what was wrong. 
You can get multiple errors inside the *errors* object.

    type     | reason
    -------- | --------
    MISSING  | Field is required
    INVALID  | Invalid characters

    + Body
    
            {
              "code": "InvalidArgument",
              "message": "Validation failed",
              "errors": {
                "{{param}}": {
                  "type": "{{type}}",
                  "reason": "{{reason}}"
                }
              }
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "errors": {
                        "type": "object",
                        "properties": {
                            "{{param}}": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string"
                                    },
                                    "reason": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }

+ Response 500 (application/json)
Internal Server Error. Contact with Tikebit.

    + Body
    
            {
                "code": "InternalServerError",
                "message": "Some critical error has occurred"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }
        
+ Response 503 (application/json)
Service Unavailable. Try later.

    + Body
    
            {
                "code": "ServiceUnavailable",
                "message": "Service temporarily unavailable"
            }
    
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }


# Group Merchant
This methods are available for **merchant** accounts.

## Payment [/merchant/payment/]

### Create a payment [POST]

Create a payment for a voucher.


+ Attributes (object)
    + voucher_code: `1234123412341234` (required, string)
        Unique 16 digits long PIN code.
        
    + currency_iso_code: `EUR` (string, required)
        Only ***EUR*** is available at this moment.
        
    + amount: 5000 (number, required)
        **Min:** 100 | **Max:** 10000
        
        The total amount of voucher. In cents.
        
    + description: `Extra info` (string, required)
        **Max length:** 250.
        
        Custom description.
        
    + nonce: `uniqueString123` (string, required)
    **Max length:** 250. 
    
        Must be allways a unique string.
    
    
+ Request

    + Headers

            Authorization: Basic ABC123

    + Body
    
            {
                "id": 97377,
                "voucher_code": "1234123412341234",
                "currency_iso_code": "EUR",
                "nonce": "uniqueString123",
                "description": "Bit2Me.com - 1€ in bitcoins: REF445588",
                "amount": 100
            }
        
    + Schema

            {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number"
                    },
                    "voucher_code": {
                        "type": "string"
                    },
                    "currency_iso_code": {
                        "type": "string"
                    },
                    "nonce": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "number"
                    }
                }
            }        
        

+ Response 201 (application/json)
The payment was created successfully.

    + Body
    
            {
                "currency_iso_code": "EUR",
                "nonce": "uniqueString123",
                "amount": 100,
                "description": "Bit2Me.com - 1€ in bitcoins: REF445588",
                "creation_timestamp": 1462470876
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "currency_iso_code": {
                        "type": "string"
                    },
                    "nonce": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "number"
                    },
                    "description": {
                        "type": "string"
                    },
                    "creation_timestamp": {
                        "type": "timestamp"
                    }
                }
            }

+ Response 400 (application/json)
Bad request.

    Posible messages             |
    -----------------------------|
    The nonce was used before    |
    Not enough voucher balance   | 
   
    + Body

            {
                "code": "BadRequest",
                "message": "{message}"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }

+ Response 401 (application/json)
Forbidden. Check Auth credentials.

    + Headers

            WWW-Authenticate: Basic realm="merchant"

    + Body
    
            {
                "code": "Unauthorized",
                "message": "Invalid username/password"
            }

    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }

+ Response 404 (application/json)
Not Found. The voucher code was not found.

    + Body
    
            {
                "code": "NotFound",
                "message": "The voucher code was not found"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }

+ Response 409 (application/json)
Conflict. Invalid argument. 
The error information will be as Object (key, value), where the key is the param name with the error and the value is an explanation of what was wrong. 
You can get multiple errors inside the *errors* object.

    type     | reason
    -------- | --------
    MISSING  | Field is required
    INVALID  | Invalid characters

    + Body
    
            {
              "code": "InvalidArgument",
              "message": "Validation failed",
              "errors": {
                "{{param}}": {
                  "type": "{{type}}",
                  "reason": "{{reason}}"
                }
              }
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "errors": {
                        "type": "object",
                        "properties": {
                            "{{param}}": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string"
                                    },
                                    "reason": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }

+ Response 500 (application/json)
Internal Server Error. Contact with Tikebit.

    + Body
    
            {
                "code": "InternalServerError",
                "message": "Some critical error has occurred"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }
        
+ Response 503 (application/json)
Service Unavailable. Try later.

    + Body
    
            {
                "code": "ServiceUnavailable",
                "message": "Service temporarily unavailable"
            }
    
    + Schema

            {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }