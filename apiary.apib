FORMAT: 1Ahttp://docs.tikebit.apiary.io/
HOST: http://api.tikebit.com/v1

# Tikebit
![Tikebit Ecosystem](http://tikebit.com/assets/images/tikebit-api-schema.svg)
**[Tikebit](http://www.tikebit.com)** is a 16 digits long PIN code available in thousand of selling points that allows you to get different cryptocurrencies in ecosystems such as Bitcoin, Ethereum, Voxelus, Augur... A new technological revolution claiming for decentralization has born. It is easier to take part of it with Tikebit. With Tikebit, users can use their cash to get PIN codes redeemable for cryptocurrencies. It's Easy, secure, private and fast. No Banks.


# Group Reseller
This methods are available for **resellers** accounts.

## Voucher [/reseller/voucher/]

### Create a voucher [POST]

Create a voucher.

+ Attributes
    + username: `usernameReseller` (string, required)
        Contact with Tikebit if you don't have a reseller account.
    + password: `passwordReseller` (string, required)
        Contact with Tikebit if you don't have a reseller account.
    + currency_iso_code: EUR (string, required)
        Only ***EUR*** is available at this moment.
    + description: Extra info (string, required)
        **Max length:** 250.
    + amount: `5000` (number, required)
    
        **Min:** 100
        
        **Max:** 10000
        
        The total amount of voucher. In cents.

+ Request

    + Body
        
            {
                "username": "UsernameReseller",
                "password": "PasswordReseller",
                "currency_iso_code": "EUR",
                "description": "RetailStore: 225",
                "amount": 5000
            }
    
    + Schema
    
            {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "currency_iso_code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "number"
                    }
                }
            }


+ Response 201 (application/json)
The voucher was created successfully.

    + Body

            {
                "id": 2448,
                "serial": "7171BA",
                "voucher_code": "1234123412341234",
                "amount": 5000,
                "balance": 5000,
                "description": "Extra information",
                "currency_iso_code": "EUR",
                "creation_date": 1462470670,
                "expiration_date": 1494006670
            }
        
    + Schema
    
            {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number"
                    },
                    "serial": {
                        "type": "string"
                    },
                    "voucher_code": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "number"
                    },
                    "balance": {
                        "type": "number"
                    },
                    "description": {
                        "type": "string"
                    },
                    "currency_iso_code": {
                        "type": "string"
                    },
                    "creation_date": {
                        "type": "timestamp"
                    },
                    "expiration_date": {
                        "type": "timestamp"
                    }
                }
            }
        
+ Response 400 (application/json)
Bad request. Check params. Posible errors:
    
    code     | message
    -------- | --------
    MISSING  | Field is required
    INVALID  | Invalid characters

            Example of "Bad request"
            {
                "status": "validation failed",
                "errors": [
                    {
                        "field": "{FIELD}",
                        "code": "{CODE}",
                        "message": "{MESSAGE}"
                    }
                ]
            }

    + Body

            {
                "status": "validation failed",
                "errors": [
                    {
                        "field": "username",
                        "code": "MISSING",
                        "message": "Field is required"
                    }
                ]
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "field": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        
+ Response 403 (application/json)
Forbidden. Check Auth credentials.

    + Body
    
            {
                "status": "forbidden",
                "message": "Invalid username/password"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }
        
+ Response 500 (application/json)
Internal Server Error. Try later.

    + Body
    
            {
                "status": "internal server error"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    }
                }
            }
        
+ Response 503 (application/json)
Service Unavailable. Try later.

    + Body
    
            {
                "status": "service unavailable"
            }
    
    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    }
                }
            }
        

### Cancel a voucher [DELETE /reseller/voucher/{voucher_code}/]

Cancel a voucher. Only can be cancelled until 10 minutes after be created. Useful when a merchant creates a wrong voucher and want cancel it immediately.

+ Parameters
    + voucher_code (required, int) ... Unique 16 digits long PIN code.

+ Attributes (object)
    + username: `usernameReseller` (string, required)
        Contact with Tikebit if you don't have a reseller account.
    + password: `passwordReseller` (string, required)
        Contact with Tikebit if you don't have a reseller account.

+ Request

    + Body
        
            {
                "username": "UsernameReseller",
                "password": "PasswordReseller"
            }

    + Schema
    
            {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
            }

+ Response 204 (application/json)
The voucher was cancelled successfully.

    + Body
    
+ Response 400 (application/json)
Bad request. Check params. Posible errors:
    
    code     | message
    -------- | --------
    MISSING  | Field is required
    INVALID  | Invalid characters

            Example of "Bad request"
            {
                "status": "validation failed",
                "errors": [
                    {
                        "field": "{FIELD}",
                        "code": "{CODE}",
                        "message": "{MESSAGE}"
                    }
                ]
            }

    + Body

            {
                "status": "validation failed",
                "errors": [
                    {
                        "field": "username",
                        "code": "MISSING",
                        "message": "Field is required"
                    }
                ]
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "field": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }

+ Response 403 (application/json)
Forbidden. Check Auth credentials.

    + Body
    
            {
                "status": "forbidden",
                "message": "Invalid username/password"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }

+ Response 404 (application/json)
Not Found. Active voucher not found.

    + Body
    
            {
                "status": "not found",
                "message": "Voucher not found"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }

+ Response 500 (application/json)
Internal Server Error. Try later.

    + Body
    
            {
                "status": "internal server error"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    }
                }
            }

+ Response 503 (application/json)
Service Unavailable. Try later.

    + Body
    
            {
                "status": "service unavailable"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    }
                }
            }


# Group Merchant
This methods are available for **merchant** accounts.

## Payment [/merchant/payment/]

### Create a payment [POST]

Create a payment for a voucher.


+ Attributes (object)
    + username: `usernameMerchant` (string, required)
        Contact with Tikebit if you don't have a merchant account.
    + password: `passwordMerchant` (string, required)
        Contact with Tikebit if you don't have a merchant account.
    + voucher_code: `1234123412341234` (required, string)
        Unique 16 digits long PIN code.
    + currency_iso_code: `EUR` (string, required)
        Only ***EUR*** is available at this moment.
    + nonce: `random123` (string, required)
        **Max length:** 250. Must be allways a unique string.
    + description: `Extra info` (string, required)
        **Max length:** 250.
    + amount: 5000 (number, required)
        
        **Min:** 100
        
        **Max:** 10000
        
        The total amount of voucher. In cents.

+ Request

    + Body
    
            {
                "username": "UsernameMerchant",
                "password": "PasswordMerchant",
                "voucher_code": "1234123412341234",
                "currency_iso_code": "EUR",
                "nonce": "random123",
                "description": "Bit2Me.com - 1€ in bitcoins: REF445588",
                "amount": 100
            }
        
    + Schema

            {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "voucher_code": {
                        "type": "string"
                    },
                    "currency_iso_code": {
                        "type": "string"
                    },
                    "nonce": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "number"
                    }
                }
            }        
        

+ Response 201 (application/json)
The payment was created successfully.

    + Body
    
            {
                "id": 20,
                "currency_iso_code": "EUR",
                "nonce": "random123",
                "amount": 100,
                "description": "Bit2Me.com - 1€ in bitcoins: REF445588",
                "creation_date": 1462470876
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number"
                    },
                    "currency_iso_code": {
                        "type": "string"
                    },
                    "nonce": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "number"
                    },
                    "description": {
                        "type": "string"
                    },
                    "creation_date": {
                        "type": "timestamp"
                    }
                }
            }
    
+ Response 400 (application/json)
Bad request. Check params. Posible errors:

    code     | message
    -------- | --------
    MISSING  | Field is required
    INVALID  | Invalid characters
    INVALID  | Payment amount is greater than voucher balance
    INVALID  | This reference was used before

            Example of "Bad request"
            {
                "status": "validation failed",
                "errors": [
                    {
                        "field": "{FIELD}",
                        "code": "{CODE}",
                        "message": "{MESSAGE}"
                    }
                ]
            }

    + Body

            {
                "status": "validation failed",
                "errors": [
                    {
                        "field": "username",
                        "code": "MISSING",
                        "message": "Field is required"
                    }
                ]
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "field": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
            

+ Response 403 (application/json)
Forbidden. Check Auth credentials.

    + Body
    
            {
                "status": "forbidden",
                "message": "Invalid username/password"
            }

    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }

+ Response 404 (application/json)
Not Found. Active voucher not found.

    + Body
    
            {
                "status": "not found",
                "message": "Voucher not found"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }

+ Response 500 (application/json)
Internal Server Error. Try later.

    + Body
    
            {
                "status": "internal server error"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    }
                }
            }
            
+ Response 503 (application/json)
Service Unavailable. Try later.

    + Body
    
            {
                "status": "service unavailable"
            }
            
    + Schema

            {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    }
                }
            }